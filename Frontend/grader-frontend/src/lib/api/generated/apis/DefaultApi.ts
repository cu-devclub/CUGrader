/* tslint:disable */
/* eslint-disable */
/**
 * Grader
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Assistant,
  CreateStudent,
  DeleteStudent,
  EditStudent,
  GroupArray,
  SectionArray,
  Students,
  TAeditBody,
  V1CallbackPost200Response,
  V1CallbackPostRequest,
  V1ClassesClassesYearSemesterGet200Response,
  V1ClassesSemestersGet200Response,
  V1LoginGet200Response,
} from '../models/index';
import {
    AssistantFromJSON,
    AssistantToJSON,
    CreateStudentFromJSON,
    CreateStudentToJSON,
    DeleteStudentFromJSON,
    DeleteStudentToJSON,
    EditStudentFromJSON,
    EditStudentToJSON,
    GroupArrayFromJSON,
    GroupArrayToJSON,
    SectionArrayFromJSON,
    SectionArrayToJSON,
    StudentsFromJSON,
    StudentsToJSON,
    TAeditBodyFromJSON,
    TAeditBodyToJSON,
    V1CallbackPost200ResponseFromJSON,
    V1CallbackPost200ResponseToJSON,
    V1CallbackPostRequestFromJSON,
    V1CallbackPostRequestToJSON,
    V1ClassesClassesYearSemesterGet200ResponseFromJSON,
    V1ClassesClassesYearSemesterGet200ResponseToJSON,
    V1ClassesSemestersGet200ResponseFromJSON,
    V1ClassesSemestersGet200ResponseToJSON,
    V1LoginGet200ResponseFromJSON,
    V1LoginGet200ResponseToJSON,
} from '../models/index';

export interface V1CallbackPostOperationRequest {
    v1CallbackPostRequest?: V1CallbackPostRequest;
}

export interface V1ClassPatchRequest {
    classId: number;
    authentication?: string;
    courseId?: number;
    name?: string;
    semester?: string;
    image?: object;
    students?: object;
}

export interface V1ClassPostRequest {
    courseId: number;
    name: string;
    semester: string;
    authentication?: string;
    image?: object;
    students?: object;
}

export interface V1ClassesClassesYearSemesterGetRequest {
    yearSemester: string;
    authentication?: string;
}

export interface V1ClassesSemestersGetRequest {
    authentication?: string;
}

export interface V1GroupClassIdGetRequest {
    classId: number;
}

export interface V1PicutrePictureIdGetRequest {
    pictureId: number;
}

export interface V1SectionClassIdGetRequest {
    classId: number;
}

export interface V1StudentDeleteRequest {
    authentication?: string;
    deleteStudent?: DeleteStudent;
}

export interface V1StudentGetRequest {
    authentication?: string;
}

export interface V1StudentPatchRequest {
    authentication?: string;
    editStudent?: EditStudent;
}

export interface V1StudentPostRequest {
    authentication?: string;
    createStudent?: CreateStudent;
}

export interface V1TADeleteRequest {
    authentication?: string;
    tAeditBody?: TAeditBody;
}

export interface V1TAGetRequest {
    authentication?: string;
}

export interface V1TAPostRequest {
    authentication?: string;
    tAeditBody?: TAeditBody;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async v1CallbackPostRaw(requestParameters: V1CallbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CallbackPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CallbackPostRequestToJSON(requestParameters['v1CallbackPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CallbackPost200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1CallbackPost(requestParameters: V1CallbackPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CallbackPost200Response> {
        const response = await this.v1CallbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially edit class information
     */
    async v1ClassPatchRaw(requestParameters: V1ClassPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling v1ClassPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['classId'] != null) {
            formParams.append('class_id', requestParameters['classId'] as any);
        }

        if (requestParameters['courseId'] != null) {
            formParams.append('course_id', requestParameters['courseId'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['semester'] != null) {
            formParams.append('semester', requestParameters['semester'] as any);
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', new Blob([JSON.stringify(objectToJSON(requestParameters['image']))], { type: "application/json", }));
                    }

        if (requestParameters['students'] != null) {
            formParams.append('students', new Blob([JSON.stringify(objectToJSON(requestParameters['students']))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/v1/class`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * partially edit class information
     */
    async v1ClassPatch(requestParameters: V1ClassPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1ClassPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create class
     */
    async v1ClassPostRaw(requestParameters: V1ClassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling v1ClassPost().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling v1ClassPost().'
            );
        }

        if (requestParameters['semester'] == null) {
            throw new runtime.RequiredError(
                'semester',
                'Required parameter "semester" was null or undefined when calling v1ClassPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['courseId'] != null) {
            formParams.append('course_id', requestParameters['courseId'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['semester'] != null) {
            formParams.append('semester', requestParameters['semester'] as any);
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', new Blob([JSON.stringify(objectToJSON(requestParameters['image']))], { type: "application/json", }));
                    }

        if (requestParameters['students'] != null) {
            formParams.append('students', new Blob([JSON.stringify(objectToJSON(requestParameters['students']))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/v1/class`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create class
     */
    async v1ClassPost(requestParameters: V1ClassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1ClassPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1ClassesClassesYearSemesterGetRaw(requestParameters: V1ClassesClassesYearSemesterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClassesClassesYearSemesterGet200Response>> {
        if (requestParameters['yearSemester'] == null) {
            throw new runtime.RequiredError(
                'yearSemester',
                'Required parameter "yearSemester" was null or undefined when calling v1ClassesClassesYearSemesterGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/classes/classes/{year-semester}`.replace(`{${"year-semester"}}`, encodeURIComponent(String(requestParameters['yearSemester']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClassesClassesYearSemesterGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1ClassesClassesYearSemesterGet(requestParameters: V1ClassesClassesYearSemesterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClassesClassesYearSemesterGet200Response> {
        const response = await this.v1ClassesClassesYearSemesterGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1ClassesSemestersGetRaw(requestParameters: V1ClassesSemestersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClassesSemestersGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/classes/semesters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClassesSemestersGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1ClassesSemestersGet(requestParameters: V1ClassesSemestersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClassesSemestersGet200Response> {
        const response = await this.v1ClassesSemestersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1GroupClassIdGetRaw(requestParameters: V1GroupClassIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupArray>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling v1GroupClassIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/group/{class_id}`.replace(`{${"class_id"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupArrayFromJSON(jsonValue));
    }

    /**
     */
    async v1GroupClassIdGet(requestParameters: V1GroupClassIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupArray> {
        const response = await this.v1GroupClassIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1LoginGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LoginGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LoginGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1LoginGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LoginGet200Response> {
        const response = await this.v1LoginGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * getting image with picture id
     */
    async v1PicutrePictureIdGetRaw(requestParameters: V1PicutrePictureIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['pictureId'] == null) {
            throw new runtime.RequiredError(
                'pictureId',
                'Required parameter "pictureId" was null or undefined when calling v1PicutrePictureIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/picutre/{picture_id}`.replace(`{${"picture_id"}}`, encodeURIComponent(String(requestParameters['pictureId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getting image with picture id
     */
    async v1PicutrePictureIdGet(requestParameters: V1PicutrePictureIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1PicutrePictureIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1SectionClassIdGetRaw(requestParameters: V1SectionClassIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionArray>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling v1SectionClassIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/section/{class_id}`.replace(`{${"class_id"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionArrayFromJSON(jsonValue));
    }

    /**
     */
    async v1SectionClassIdGet(requestParameters: V1SectionClassIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionArray> {
        const response = await this.v1SectionClassIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete student
     */
    async v1StudentDeleteRaw(requestParameters: V1StudentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/student`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteStudentToJSON(requestParameters['deleteStudent']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete student
     */
    async v1StudentDelete(requestParameters: V1StudentDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1StudentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get list of students
     */
    async v1StudentGetRaw(requestParameters: V1StudentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Students>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/student`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentsFromJSON(jsonValue));
    }

    /**
     * get list of students
     */
    async v1StudentGet(requestParameters: V1StudentGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Students> {
        const response = await this.v1StudentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit student info
     */
    async v1StudentPatchRaw(requestParameters: V1StudentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/student`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditStudentToJSON(requestParameters['editStudent']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Edit student info
     */
    async v1StudentPatch(requestParameters: V1StudentPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1StudentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert student
     */
    async v1StudentPostRaw(requestParameters: V1StudentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/student`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStudentToJSON(requestParameters['createStudent']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Insert student
     */
    async v1StudentPost(requestParameters: V1StudentPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1StudentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete TA from class
     */
    async v1TADeleteRaw(requestParameters: V1TADeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/TA`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TAeditBodyToJSON(requestParameters['tAeditBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete TA from class
     */
    async v1TADelete(requestParameters: V1TADeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1TADeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get list of assistant and instructor
     */
    async v1TAGetRaw(requestParameters: V1TAGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assistant>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/TA`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssistantFromJSON(jsonValue));
    }

    /**
     * get list of assistant and instructor
     */
    async v1TAGet(requestParameters: V1TAGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assistant> {
        const response = await this.v1TAGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add TA to class
     */
    async v1TAPostRaw(requestParameters: V1TAPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authentication'] != null) {
            headerParameters['Authentication'] = String(requestParameters['authentication']);
        }

        const response = await this.request({
            path: `/v1/TA`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TAeditBodyToJSON(requestParameters['tAeditBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add TA to class
     */
    async v1TAPost(requestParameters: V1TAPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1TAPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
